// Code generated by MockGen. DO NOT EDIT.
// Source: dependency.go
//
// Generated by this command:
//
//	mockgen -source=dependency.go -destination=./dependency_mock.go -package=shrink
//

// Package shrink is a generated GoMock package.
package shrink

import (
	context "context"
	reflect "reflect"

	model "github.com/dimuska139/urlshortener/internal/model"
	v5 "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// WithTx mocks base method.
func (m *MockTransactionManager) WithTx(ctx context.Context, fn func(context.Context) error, opts v5.TxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", ctx, fn, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockTransactionManagerMockRecorder) WithTx(ctx, fn, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockTransactionManager)(nil).WithTx), ctx, fn, opts)
}

// MockLinkRepository is a mock of LinkRepository interface.
type MockLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLinkRepositoryMockRecorder
}

// MockLinkRepositoryMockRecorder is the mock recorder for MockLinkRepository.
type MockLinkRepositoryMockRecorder struct {
	mock *MockLinkRepository
}

// NewMockLinkRepository creates a new mock instance.
func NewMockLinkRepository(ctrl *gomock.Controller) *MockLinkRepository {
	mock := &MockLinkRepository{ctrl: ctrl}
	mock.recorder = &MockLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkRepository) EXPECT() *MockLinkRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLinkRepository) Create(ctx context.Context, longUrl string) (model.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, longUrl)
	ret0, _ := ret[0].(model.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLinkRepositoryMockRecorder) Create(ctx, longUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLinkRepository)(nil).Create), ctx, longUrl)
}

// GetLongUrlByCode mocks base method.
func (m *MockLinkRepository) GetLongUrlByCode(ctx context.Context, shortCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongUrlByCode", ctx, shortCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongUrlByCode indicates an expected call of GetLongUrlByCode.
func (mr *MockLinkRepositoryMockRecorder) GetLongUrlByCode(ctx, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongUrlByCode", reflect.TypeOf((*MockLinkRepository)(nil).GetLongUrlByCode), ctx, shortCode)
}

// SetShortcode mocks base method.
func (m *MockLinkRepository) SetShortcode(ctx context.Context, id int, shortcode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShortcode", ctx, id, shortcode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetShortcode indicates an expected call of SetShortcode.
func (mr *MockLinkRepositoryMockRecorder) SetShortcode(ctx, id, shortcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShortcode", reflect.TypeOf((*MockLinkRepository)(nil).SetShortcode), ctx, id, shortcode)
}
