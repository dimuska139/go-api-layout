// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/dimuska139/urlshortener/internal/config"
	"github.com/dimuska139/urlshortener/internal/service/application"
	"github.com/dimuska139/urlshortener/internal/service/server/rest"
	shrink2 "github.com/dimuska139/urlshortener/internal/service/server/rest/handler/shrink"
	"github.com/dimuska139/urlshortener/internal/service/server/rest/middleware"
	"github.com/dimuska139/urlshortener/internal/service/server/rest/middleware/cors"
	"github.com/dimuska139/urlshortener/internal/service/shrink"
	statistics2 "github.com/dimuska139/urlshortener/internal/service/statistics"
	"github.com/dimuska139/urlshortener/internal/storage/postgresql/link"
	"github.com/dimuska139/urlshortener/internal/storage/postgresql/migrator"
	"github.com/dimuska139/urlshortener/internal/storage/postgresql/statistics"
	"github.com/dimuska139/urlshortener/pkg/postgresql"
	"github.com/jackc/pgx/v5/pgxpool"
)

// Injectors from wire.go:

func InitConfig(configPath string, version config.VersionParam) (*config.Config, error) {
	configConfig, err := config.NewConfig(configPath, version)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitMigrator(configConfig *config.Config) (*migrator.Migrator, func(), error) {
	migratorConfig := configConfig.Migrator
	migratorMigrator, cleanup, err := migrator.NewMigrator(migratorConfig)
	if err != nil {
		return nil, nil, err
	}
	return migratorMigrator, func() {
		cleanup()
	}, nil
}

func initPgxPool(configConfig *config.Config) (*pgxpool.Pool, func(), error) {
	postgresqlConfig := configConfig.PostgreSQL
	pool, cleanup, err := postgresql.NewPgxPool(postgresqlConfig)
	if err != nil {
		return nil, nil, err
	}
	return pool, func() {
		cleanup()
	}, nil
}

func initPostresPool(pool *pgxpool.Pool) (*postgresql.PostgresPool, func(), error) {
	postgresPool, err := postgresql.NewPostgresPool(pool)
	if err != nil {
		return nil, nil, err
	}
	return postgresPool, func() {
	}, nil
}

func initTransactionManager(pool *pgxpool.Pool) (*postgresql.TransactionManager, func(), error) {
	transactionManager := postgresql.NewTransactionManager(pool)
	return transactionManager, func() {
	}, nil
}

func initLinkRepository(postgresPool *postgresql.PostgresPool) (*link.Repository, func(), error) {
	repository := link.NewRepository(postgresPool)
	return repository, func() {
	}, nil
}

func initShrinkService(configConfig *config.Config, postgresPool *postgresql.PostgresPool, transactionManager *postgresql.TransactionManager) (*shrink.ShrinkService, func(), error) {
	shrinkConfig := configConfig.Shrink
	repository, cleanup, err := initLinkRepository(postgresPool)
	if err != nil {
		return nil, nil, err
	}
	shrinkService := shrink.NewShrinkService(shrinkConfig, transactionManager, repository)
	return shrinkService, func() {
		cleanup()
	}, nil
}

func initStatisticsRepository(postgresPool *postgresql.PostgresPool) (*statistics.Repository, func(), error) {
	repository := statistics.NewRepository(postgresPool)
	return repository, func() {
	}, nil
}

func initStatisticsService(postgresPool *postgresql.PostgresPool) (*statistics2.StatisticsService, func(), error) {
	repository, cleanup, err := initStatisticsRepository(postgresPool)
	if err != nil {
		return nil, nil, err
	}
	statisticsService := statistics2.NewStatisticsService(repository)
	return statisticsService, func() {
		cleanup()
	}, nil
}

func initCorsMiddleware(middlewareConfig *middleware.Config) (*cors.Middleware, error) {
	corsConfig := middlewareConfig.Cors
	corsMiddleware := cors.NewMiddleware(corsConfig)
	return corsMiddleware, nil
}

func initMiddlewareFactory(restConfig *rest.Config) (*middleware.Factory, error) {
	middlewareConfig := &restConfig.Middleware
	corsMiddleware, err := initCorsMiddleware(middlewareConfig)
	if err != nil {
		return nil, err
	}
	factory := &middleware.Factory{
		Cors: corsMiddleware,
	}
	return factory, nil
}

func initShrinkHandler(configConfig *config.Config, shrinkService *shrink.ShrinkService, statisticsService *statistics2.StatisticsService) (*shrink2.Handler, func(), error) {
	handler := shrink2.NewHandler(statisticsService, shrinkService)
	return handler, func() {
	}, nil
}

func initRestApiServer(configConfig *config.Config, shrinkService *shrink.ShrinkService, statisticsService *statistics2.StatisticsService) (*rest.Server, func(), error) {
	restConfig := configConfig.HttpServer
	config2 := &configConfig.HttpServer
	factory, err := initMiddlewareFactory(config2)
	if err != nil {
		return nil, nil, err
	}
	handler, cleanup, err := initShrinkHandler(configConfig, shrinkService, statisticsService)
	if err != nil {
		return nil, nil, err
	}
	server, err := rest.NewServer(restConfig, factory, handler)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return server, func() {
		cleanup()
	}, nil
}

func InitApplication(configConfig *config.Config) (*application.Application, func(), error) {
	pool, cleanup, err := initPgxPool(configConfig)
	if err != nil {
		return nil, nil, err
	}
	postgresPool, cleanup2, err := initPostresPool(pool)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	transactionManager, cleanup3, err := initTransactionManager(pool)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	shrinkService, cleanup4, err := initShrinkService(configConfig, postgresPool, transactionManager)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	statisticsService, cleanup5, err := initStatisticsService(postgresPool)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, cleanup6, err := initRestApiServer(configConfig, shrinkService, statisticsService)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	applicationApplication := application.NewApplication(server)
	return applicationApplication, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
