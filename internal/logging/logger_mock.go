// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package logging is a generated GoMock package.
package logging

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v4"
)

// MockLoggerer is a mock of Loggerer interface.
type MockLoggerer struct {
	ctrl     *gomock.Controller
	recorder *MockLoggererMockRecorder
}

// MockLoggererMockRecorder is the mock recorder for MockLoggerer.
type MockLoggererMockRecorder struct {
	mock *MockLoggerer
}

// NewMockLoggerer creates a new mock instance.
func NewMockLoggerer(ctrl *gomock.Controller) *MockLoggerer {
	mock := &MockLoggerer{ctrl: ctrl}
	mock.recorder = &MockLoggererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerer) EXPECT() *MockLoggererMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerer) Debug(msg string, err error, extra map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", msg, err, extra)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggererMockRecorder) Debug(msg, err, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerer)(nil).Debug), msg, err, extra)
}

// Error mocks base method.
func (m *MockLoggerer) Error(msg string, err error, extra map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", msg, err, extra)
}

// Error indicates an expected call of Error.
func (mr *MockLoggererMockRecorder) Error(msg, err, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerer)(nil).Error), msg, err, extra)
}

// Fatal mocks base method.
func (m *MockLoggerer) Fatal(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggererMockRecorder) Fatal(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerer)(nil).Fatal), v...)
}

// Fatalf mocks base method.
func (m *MockLoggerer) Fatalf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLoggererMockRecorder) Fatalf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLoggerer)(nil).Fatalf), varargs...)
}

// Info mocks base method.
func (m *MockLoggerer) Info(msg string, err error, extra map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg, err, extra)
}

// Info indicates an expected call of Info.
func (mr *MockLoggererMockRecorder) Info(msg, err, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerer)(nil).Info), msg, err, extra)
}

// NewPgxLogger mocks base method.
func (m *MockLoggerer) NewPgxLogger() pgx.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPgxLogger")
	ret0, _ := ret[0].(pgx.Logger)
	return ret0
}

// NewPgxLogger indicates an expected call of NewPgxLogger.
func (mr *MockLoggererMockRecorder) NewPgxLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPgxLogger", reflect.TypeOf((*MockLoggerer)(nil).NewPgxLogger))
}

// Panic mocks base method.
func (m *MockLoggerer) Panic(msg string, err error, extra map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", msg, err, extra)
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggererMockRecorder) Panic(msg, err, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLoggerer)(nil).Panic), msg, err, extra)
}

// Print mocks base method.
func (m *MockLoggerer) Print(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Print", varargs...)
}

// Print indicates an expected call of Print.
func (mr *MockLoggererMockRecorder) Print(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockLoggerer)(nil).Print), v...)
}

// Printf mocks base method.
func (m *MockLoggerer) Printf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockLoggererMockRecorder) Printf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLoggerer)(nil).Printf), varargs...)
}

// Println mocks base method.
func (m *MockLoggerer) Println(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Println", varargs...)
}

// Println indicates an expected call of Println.
func (mr *MockLoggererMockRecorder) Println(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockLoggerer)(nil).Println), v...)
}

// Warn mocks base method.
func (m *MockLoggerer) Warn(msg string, err error, extra map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", msg, err, extra)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggererMockRecorder) Warn(msg, err, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerer)(nil).Warn), msg, err, extra)
}
